[2025-10-30T13:20:26.127Z] [DEBUG] [PERPLEXITY_STREAMING] Starting async generator: perplexityRedChamberQAStreaming
DATA: {
  "functionName": "perplexityRedChamberQAStreaming",
  "inputType": "object",
  "inputKeys": [
    "userQuestion",
    "modelKey",
    "reasoningEffort",
    "questionContext",
    "enableStreaming",
    "includeDetailedCitations",
    "showThinkingProcess",
    "temperature",
    "maxTokens",
    "selectedText",
    "chapterContext",
    "currentChapter"
  ],
  "hasAsyncIterator": false
}
[2025-10-30T13:20:26.136Z] [DEBUG] [PERPLEXITY_STREAMING] Function entry point reached
DATA: {
  "inputType": "object",
  "inputKeys": [
    "userQuestion",
    "modelKey",
    "reasoningEffort",
    "questionContext",
    "enableStreaming",
    "includeDetailedCitations",
    "showThinkingProcess",
    "temperature",
    "maxTokens",
    "selectedText",
    "chapterContext",
    "currentChapter"
  ],
  "userQuestionLength": 114,
  "enableStreaming": true
}
[2025-10-30T13:20:26.331Z] [DEBUG] [PERPLEXITY_STREAMING] Getting Perplexity client
[2025-10-30T13:20:26.335Z] [DEBUG] [PERPLEXITY_STREAMING] Client obtained
DATA: {
  "clientType": "object",
  "clientConstructor": "PerplexityClient",
  "hasStreamingMethod": true
}
[2025-10-30T13:20:26.337Z] [DEBUG] [PERPLEXITY_STREAMING] Calling client.streamingCompletionRequest
DATA: {
  "processedInputType": "object",
  "processedInputKeys": [
    "userQuestion",
    "modelKey",
    "reasoningEffort",
    "questionContext",
    "enableStreaming",
    "includeDetailedCitations",
    "showThinkingProcess",
    "temperature",
    "maxTokens",
    "selectedText",
    "chapterContext",
    "currentChapter"
  ]
}
[2025-10-30T13:20:26.339Z] [DEBUG] [PERPLEXITY_STREAMING] Stream generator created
DATA: {
  "generatorType": "object",
  "generatorConstructor": "",
  "hasAsyncIterator": true
}
[2025-10-30T13:20:26.342Z] [DEBUG] [PERPLEXITY_STREAMING] Starting for-await loop on: client.streamingCompletionRequest
DATA: {
  "iterableSource": "client.streamingCompletionRequest",
  "iterableType": "object",
  "hasAsyncIterator": true,
  "hasIterator": false,
  "constructorName": ""
}
[2025-10-30T13:20:26.346Z] [DEBUG] [PERPLEXITY_CLIENT] PerplexityClient.streamingCompletionRequest called
DATA: {
  "inputType": "object",
  "userQuestionLength": 114,
  "enableStreaming": true
}
[2025-10-30T13:20:26.349Z] [DEBUG] [PERPLEXITY_CLIENT] Making HTTP request to Perplexity API
DATA: {
  "endpoint": "/chat/completions",
  "requestDataKeys": [
    "model",
    "temperature",
    "max_tokens",
    "stream",
    "reasoning_effort",
    "messages"
  ],
  "model": "sonar-reasoning",
  "stream": true
}
[2025-10-30T13:20:29.165Z] [DEBUG] [PERPLEXITY_CLIENT] Received HTTP response
DATA: {
  "statusCode": 200,
  "statusText": "OK",
  "dataType": "object",
  "dataConstructor": "IncomingMessage"
}
[2025-10-30T13:20:29.167Z] [DEBUG] [PERPLEXITY_CLIENT] Starting for-await loop on: this.parseStreamingResponse(stream)
DATA: {
  "iterableSource": "this.parseStreamingResponse(stream)",
  "iterableType": "object",
  "hasAsyncIterator": true,
  "hasIterator": false,
  "constructorName": ""
}
[2025-10-30T13:20:31.727Z] [DEBUG] [PERPLEXITY_STREAMING] Starting async generator: perplexityRedChamberQAStreaming
DATA: {
  "functionName": "perplexityRedChamberQAStreaming",
  "inputType": "object",
  "inputKeys": [
    "userQuestion",
    "modelKey",
    "reasoningEffort",
    "questionContext",
    "enableStreaming",
    "includeDetailedCitations",
    "showThinkingProcess",
    "temperature",
    "maxTokens",
    "selectedText",
    "chapterContext",
    "currentChapter"
  ],
  "hasAsyncIterator": false
}
[2025-10-30T13:20:31.732Z] [DEBUG] [PERPLEXITY_STREAMING] Function entry point reached
DATA: {
  "inputType": "object",
  "inputKeys": [
    "userQuestion",
    "modelKey",
    "reasoningEffort",
    "questionContext",
    "enableStreaming",
    "includeDetailedCitations",
    "showThinkingProcess",
    "temperature",
    "maxTokens",
    "selectedText",
    "chapterContext",
    "currentChapter"
  ],
  "userQuestionLength": 114,
  "enableStreaming": true
}
[2025-10-30T13:20:31.733Z] [DEBUG] [PERPLEXITY_STREAMING] Getting Perplexity client
[2025-10-30T13:20:31.735Z] [DEBUG] [PERPLEXITY_STREAMING] Client obtained
DATA: {
  "clientType": "object",
  "clientConstructor": "PerplexityClient",
  "hasStreamingMethod": true
}
[2025-10-30T13:20:31.736Z] [DEBUG] [PERPLEXITY_STREAMING] Calling client.streamingCompletionRequest
DATA: {
  "processedInputType": "object",
  "processedInputKeys": [
    "userQuestion",
    "modelKey",
    "reasoningEffort",
    "questionContext",
    "enableStreaming",
    "includeDetailedCitations",
    "showThinkingProcess",
    "temperature",
    "maxTokens",
    "selectedText",
    "chapterContext",
    "currentChapter"
  ]
}
[2025-10-30T13:20:31.738Z] [DEBUG] [PERPLEXITY_STREAMING] Stream generator created
DATA: {
  "generatorType": "object",
  "generatorConstructor": "",
  "hasAsyncIterator": true
}
[2025-10-30T13:20:31.739Z] [DEBUG] [PERPLEXITY_STREAMING] Starting for-await loop on: client.streamingCompletionRequest
DATA: {
  "iterableSource": "client.streamingCompletionRequest",
  "iterableType": "object",
  "hasAsyncIterator": true,
  "hasIterator": false,
  "constructorName": ""
}
[2025-10-30T13:20:31.740Z] [DEBUG] [PERPLEXITY_CLIENT] PerplexityClient.streamingCompletionRequest called
DATA: {
  "inputType": "object",
  "userQuestionLength": 114,
  "enableStreaming": true
}
[2025-10-30T13:20:31.741Z] [DEBUG] [PERPLEXITY_CLIENT] Making HTTP request to Perplexity API
DATA: {
  "endpoint": "/chat/completions",
  "requestDataKeys": [
    "model",
    "temperature",
    "max_tokens",
    "stream",
    "reasoning_effort",
    "messages"
  ],
  "model": "sonar-reasoning",
  "stream": true
}
[2025-10-30T13:20:33.911Z] [DEBUG] [PERPLEXITY_CLIENT] Received HTTP response
DATA: {
  "statusCode": 200,
  "statusText": "OK",
  "dataType": "object",
  "dataConstructor": "IncomingMessage"
}
[2025-10-30T13:20:33.915Z] [DEBUG] [PERPLEXITY_CLIENT] Starting for-await loop on: this.parseStreamingResponse(stream)
DATA: {
  "iterableSource": "this.parseStreamingResponse(stream)",
  "iterableType": "object",
  "hasAsyncIterator": true,
  "hasIterator": false,
  "constructorName": ""
}
