[2025-10-13T06:34:54.028Z] [DEBUG] [PERPLEXITY_STREAMING] Starting async generator: perplexityRedChamberQAStreaming
DATA: {
  "functionName": "perplexityRedChamberQAStreaming",
  "inputType": "object",
  "inputKeys": [
    "userQuestion",
    "modelKey",
    "reasoningEffort",
    "questionContext",
    "enableStreaming",
    "includeDetailedCitations",
    "showThinkingProcess",
    "temperature",
    "maxTokens",
    "selectedText",
    "chapterContext",
    "currentChapter"
  ],
  "hasAsyncIterator": false
}
[2025-10-13T06:34:54.035Z] [DEBUG] [PERPLEXITY_STREAMING] Function entry point reached
DATA: {
  "inputType": "object",
  "inputKeys": [
    "userQuestion",
    "modelKey",
    "reasoningEffort",
    "questionContext",
    "enableStreaming",
    "includeDetailedCitations",
    "showThinkingProcess",
    "temperature",
    "maxTokens",
    "selectedText",
    "chapterContext",
    "currentChapter"
  ],
  "userQuestionLength": 11,
  "enableStreaming": true
}
[2025-10-13T06:34:54.039Z] [DEBUG] [PERPLEXITY_STREAMING] Getting Perplexity client
[2025-10-13T06:34:54.041Z] [DEBUG] [PERPLEXITY_STREAMING] Client obtained
DATA: {
  "clientType": "object",
  "clientConstructor": "PerplexityClient",
  "hasStreamingMethod": true
}
[2025-10-13T06:34:54.042Z] [DEBUG] [PERPLEXITY_STREAMING] Calling client.streamingCompletionRequest
DATA: {
  "processedInputType": "object",
  "processedInputKeys": [
    "userQuestion",
    "modelKey",
    "reasoningEffort",
    "questionContext",
    "enableStreaming",
    "includeDetailedCitations",
    "showThinkingProcess",
    "temperature",
    "maxTokens",
    "selectedText",
    "chapterContext",
    "currentChapter"
  ]
}
[2025-10-13T06:34:54.044Z] [DEBUG] [PERPLEXITY_STREAMING] Stream generator created
DATA: {
  "generatorType": "object",
  "generatorConstructor": "",
  "hasAsyncIterator": true
}
[2025-10-13T06:34:54.046Z] [DEBUG] [PERPLEXITY_STREAMING] Starting for-await loop on: client.streamingCompletionRequest
DATA: {
  "iterableSource": "client.streamingCompletionRequest",
  "iterableType": "object",
  "hasAsyncIterator": true,
  "hasIterator": false,
  "constructorName": ""
}
[2025-10-13T06:34:54.047Z] [DEBUG] [PERPLEXITY_CLIENT] PerplexityClient.streamingCompletionRequest called
DATA: {
  "inputType": "object",
  "userQuestionLength": 11,
  "enableStreaming": true
}
[2025-10-13T06:34:54.048Z] [DEBUG] [PERPLEXITY_CLIENT] Making HTTP request to Perplexity API
DATA: {
  "endpoint": "/chat/completions",
  "requestDataKeys": [
    "model",
    "temperature",
    "max_tokens",
    "stream",
    "reasoning_effort",
    "messages"
  ],
  "model": "sonar-reasoning",
  "stream": true
}
[2025-10-13T06:34:56.042Z] [DEBUG] [PERPLEXITY_CLIENT] Received HTTP response
DATA: {
  "statusCode": 200,
  "statusText": "OK",
  "dataType": "object",
  "dataConstructor": "IncomingMessage"
}
[2025-10-13T06:34:56.044Z] [DEBUG] [PERPLEXITY_CLIENT] Starting for-await loop on: this.parseStreamingResponse(stream)
DATA: {
  "iterableSource": "this.parseStreamingResponse(stream)",
  "iterableType": "object",
  "hasAsyncIterator": true,
  "hasIterator": false,
  "constructorName": ""
}
[2025-10-13T06:36:06.312Z] [DEBUG] [PERPLEXITY_STREAMING] Starting async generator: perplexityRedChamberQAStreaming
DATA: {
  "functionName": "perplexityRedChamberQAStreaming",
  "inputType": "object",
  "inputKeys": [
    "userQuestion",
    "modelKey",
    "reasoningEffort",
    "questionContext",
    "enableStreaming",
    "includeDetailedCitations",
    "showThinkingProcess",
    "temperature",
    "maxTokens",
    "selectedText",
    "chapterContext",
    "currentChapter"
  ],
  "hasAsyncIterator": false
}
[2025-10-13T06:36:06.314Z] [DEBUG] [PERPLEXITY_STREAMING] Function entry point reached
DATA: {
  "inputType": "object",
  "inputKeys": [
    "userQuestion",
    "modelKey",
    "reasoningEffort",
    "questionContext",
    "enableStreaming",
    "includeDetailedCitations",
    "showThinkingProcess",
    "temperature",
    "maxTokens",
    "selectedText",
    "chapterContext",
    "currentChapter"
  ],
  "userQuestionLength": 114,
  "enableStreaming": true
}
[2025-10-13T06:36:06.315Z] [DEBUG] [PERPLEXITY_STREAMING] Getting Perplexity client
[2025-10-13T06:36:06.316Z] [DEBUG] [PERPLEXITY_STREAMING] Client obtained
DATA: {
  "clientType": "object",
  "clientConstructor": "PerplexityClient",
  "hasStreamingMethod": true
}
[2025-10-13T06:36:06.318Z] [DEBUG] [PERPLEXITY_STREAMING] Calling client.streamingCompletionRequest
DATA: {
  "processedInputType": "object",
  "processedInputKeys": [
    "userQuestion",
    "modelKey",
    "reasoningEffort",
    "questionContext",
    "enableStreaming",
    "includeDetailedCitations",
    "showThinkingProcess",
    "temperature",
    "maxTokens",
    "selectedText",
    "chapterContext",
    "currentChapter"
  ]
}
[2025-10-13T06:36:06.320Z] [DEBUG] [PERPLEXITY_STREAMING] Stream generator created
DATA: {
  "generatorType": "object",
  "generatorConstructor": "",
  "hasAsyncIterator": true
}
[2025-10-13T06:36:06.321Z] [DEBUG] [PERPLEXITY_STREAMING] Starting for-await loop on: client.streamingCompletionRequest
DATA: {
  "iterableSource": "client.streamingCompletionRequest",
  "iterableType": "object",
  "hasAsyncIterator": true,
  "hasIterator": false,
  "constructorName": ""
}
[2025-10-13T06:36:06.322Z] [DEBUG] [PERPLEXITY_CLIENT] PerplexityClient.streamingCompletionRequest called
DATA: {
  "inputType": "object",
  "userQuestionLength": 114,
  "enableStreaming": true
}
[2025-10-13T06:36:06.324Z] [DEBUG] [PERPLEXITY_CLIENT] Making HTTP request to Perplexity API
DATA: {
  "endpoint": "/chat/completions",
  "requestDataKeys": [
    "model",
    "temperature",
    "max_tokens",
    "stream",
    "reasoning_effort",
    "messages"
  ],
  "model": "sonar-reasoning",
  "stream": true
}
[2025-10-13T06:36:07.785Z] [DEBUG] [PERPLEXITY_CLIENT] Received HTTP response
DATA: {
  "statusCode": 200,
  "statusText": "OK",
  "dataType": "object",
  "dataConstructor": "IncomingMessage"
}
[2025-10-13T06:36:07.786Z] [DEBUG] [PERPLEXITY_CLIENT] Starting for-await loop on: this.parseStreamingResponse(stream)
DATA: {
  "iterableSource": "this.parseStreamingResponse(stream)",
  "iterableType": "object",
  "hasAsyncIterator": true,
  "hasIterator": false,
  "constructorName": ""
}
