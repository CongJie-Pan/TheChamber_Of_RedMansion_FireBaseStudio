/**
 * @fileOverview Daily Task System - Firebase Schema Configuration
 *
 * This file defines the Firestore collections schema, index requirements,
 * and validation rules for the Daily Task System (每日修身).
 *
 * Collections:
 * - dailyTasks: Task definitions and content
 * - dailyTaskProgress: User daily progress tracking
 * - dailyTaskHistory: Historical task completion records
 *
 * @phase Phase 1.3 - Firebase Schema Design
 */

import {
  DailyTask,
  DailyTaskProgress,
  TaskHistoryRecord,
  DailyTaskType,
  TaskDifficulty,
  TaskStatus
} from '../types/daily-task';

/**
 * Collection names as constants for type-safe references
 */
export const DAILY_TASK_COLLECTIONS = {
  TASKS: 'dailyTasks',
  PROGRESS: 'dailyTaskProgress',
  HISTORY: 'dailyTaskHistory',
} as const;

/**
 * Firestore composite index requirements
 * These indexes must be created in Firebase Console for optimal query performance
 */
export const REQUIRED_INDEXES = [
  {
    collection: 'dailyTaskProgress',
    fields: [
      { field: 'userId', order: 'ASCENDING' },
      { field: 'date', order: 'DESCENDING' },
    ],
    description: 'Query user progress by date range',
  },
  {
    collection: 'dailyTaskProgress',
    fields: [
      { field: 'userId', order: 'ASCENDING' },
      { field: 'updatedAt', order: 'DESCENDING' },
    ],
    description: 'Get latest user progress',
  },
  {
    collection: 'dailyTaskHistory',
    fields: [
      { field: 'userId', order: 'ASCENDING' },
      { field: 'completedAt', order: 'DESCENDING' },
    ],
    description: 'Query user task history chronologically',
  },
  {
    collection: 'dailyTaskHistory',
    fields: [
      { field: 'userId', order: 'ASCENDING' },
      { field: 'taskType', order: 'ASCENDING' },
      { field: 'completedAt', order: 'DESCENDING' },
    ],
    description: 'Query user history by task type',
  },
  {
    collection: 'dailyTasks',
    fields: [
      { field: 'type', order: 'ASCENDING' },
      { field: 'difficulty', order: 'ASCENDING' },
    ],
    description: 'Filter tasks by type and difficulty',
  },
] as const;

/**
 * Firestore Security Rules (suggested implementation)
 *
 * Deploy these rules to Firebase Console > Firestore > Rules
 */
export const SUGGESTED_SECURITY_RULES = `
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isValidDate(dateString) {
      return dateString.matches('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
    }

    // Daily Tasks Collection (read-only for all authenticated users)
    match /dailyTasks/{taskId} {
      allow read: if isAuthenticated();
      allow write: if false; // Tasks managed server-side only
    }

    // Daily Task Progress Collection (users can only access their own)
    match /dailyTaskProgress/{progressId} {
      allow read: if isAuthenticated() &&
                     progressId.matches('^' + request.auth.uid + '_[0-9]{4}-[0-9]{2}-[0-9]{2}$');

      allow create: if isAuthenticated() &&
                       progressId.matches('^' + request.auth.uid + '_[0-9]{4}-[0-9]{2}-[0-9]{2}$') &&
                       request.resource.data.userId == request.auth.uid;

      allow update: if isAuthenticated() &&
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.userId == request.auth.uid;

      allow delete: if false; // No deletion allowed
    }

    // Daily Task History Collection (read-only for users, append-only)
    match /dailyTaskHistory/{historyId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // History is immutable
    }
  }
}
`;

/**
 * Document ID generation patterns
 */
export const DOCUMENT_ID_PATTERNS = {
  /**
   * Daily task progress document ID format: {userId}_{YYYY-MM-DD}
   * @example "user123_2025-01-15"
   */
  PROGRESS: (userId: string, date: string) => `${userId}_${date}`,

  /**
   * Task history document ID: auto-generated by Firestore
   */
  HISTORY: 'auto',

  /**
   * Daily task document ID: auto-generated or UUID
   */
  TASK: 'auto',
} as const;

/**
 * Collection size and performance estimates
 */
export const COLLECTION_ESTIMATES = {
  dailyTasks: {
    estimatedDocuments: 500, // ~100 tasks per type × 5 types
    averageDocSize: 2, // KB
    growthRate: 'slow', // New tasks added periodically
    readPattern: 'high', // Frequently read for task generation
    writePattern: 'low', // Rarely updated
  },
  dailyTaskProgress: {
    estimatedDocuments: 36500, // 1000 users × 365 days/year
    averageDocSize: 4, // KB
    growthRate: 'linear', // 1 doc per user per day
    readPattern: 'high', // Read on every task interaction
    writePattern: 'medium', // Updated multiple times per day
  },
  dailyTaskHistory: {
    estimatedDocuments: 730000, // 1000 users × 2 tasks/day × 365 days
    averageDocSize: 0.5, // KB (minimal fields)
    growthRate: 'linear', // 2 docs per user per day
    readPattern: 'low', // Only for analytics/history view
    writePattern: 'append-only', // Write once, never updated
  },
} as const;

/**
 * Data validation helpers
 */
export const TaskSchemaValidators = {
  /**
   * Validate task type enum
   */
  isValidTaskType(type: string): type is DailyTaskType {
    return Object.values(DailyTaskType).includes(type as DailyTaskType);
  },

  /**
   * Validate task difficulty enum
   */
  isValidDifficulty(difficulty: string): difficulty is TaskDifficulty {
    return Object.values(TaskDifficulty).includes(difficulty as TaskDifficulty);
  },

  /**
   * Validate task status enum
   */
  isValidStatus(status: string): status is TaskStatus {
    return Object.values(TaskStatus).includes(status as TaskStatus);
  },

  /**
   * Validate date format (YYYY-MM-DD in UTC+8)
   */
  isValidDateFormat(date: string): boolean {
    const pattern = /^\d{4}-\d{2}-\d{2}$/;
    if (!pattern.test(date)) return false;

    const dateObj = new Date(date);
    return dateObj instanceof Date && !isNaN(dateObj.getTime());
  },

  /**
   * Validate progress document ID format
   */
  isValidProgressId(progressId: string): boolean {
    const pattern = /^[a-zA-Z0-9_-]+_\d{4}-\d{2}-\d{2}$/;
    return pattern.test(progressId);
  },

  /**
   * Validate XP reward range
   */
  isValidXPReward(xp: number): boolean {
    return xp >= 0 && xp <= 1000; // Max 1000 XP per task
  },

  /**
   * Validate score range (0-100)
   */
  isValidScore(score: number): boolean {
    return score >= 0 && score <= 100;
  },

  /**
   * Validate streak value
   */
  isValidStreak(streak: number): boolean {
    return Number.isInteger(streak) && streak >= 0;
  },

  /**
   * Validate time estimate (minutes)
   */
  isValidTimeEstimate(minutes: number): boolean {
    return minutes > 0 && minutes <= 60; // Max 60 minutes per task
  },
};

/**
 * Schema migration helpers
 */
export const SchemaMigrations = {
  /**
   * Version 1.0.0 - Initial schema
   */
  v1_0_0: {
    description: 'Initial daily task system schema',
    appliedAt: '2025-01-XX', // To be updated when deployed
    changes: [
      'Created dailyTasks collection',
      'Created dailyTaskProgress collection',
      'Created dailyTaskHistory collection',
      'Added composite indexes for user queries',
    ],
  },
};

/**
 * Firestore query limits and pagination
 */
export const QUERY_LIMITS = {
  /**
   * Maximum tasks to fetch per query
   */
  MAX_TASKS_PER_QUERY: 50,

  /**
   * Maximum history records per query
   */
  MAX_HISTORY_PER_QUERY: 100,

  /**
   * Default history limit
   */
  DEFAULT_HISTORY_LIMIT: 30,

  /**
   * Maximum progress records for analytics
   */
  MAX_PROGRESS_RECORDS: 365, // 1 year of data
} as const;

/**
 * Cache TTL (Time To Live) recommendations
 */
export const CACHE_TTL = {
  /**
   * Task definitions cache (rarely change)
   */
  TASK_DEFINITIONS: 3600, // 1 hour in seconds

  /**
   * User progress cache (updates frequently)
   */
  USER_PROGRESS: 300, // 5 minutes

  /**
   * Task history cache (append-only, can cache longer)
   */
  TASK_HISTORY: 1800, // 30 minutes

  /**
   * Statistics cache (expensive to calculate)
   */
  STATISTICS: 3600, // 1 hour
} as const;

/**
 * Batch operation limits
 */
export const BATCH_LIMITS = {
  /**
   * Firestore batch write limit
   */
  MAX_BATCH_SIZE: 500,

  /**
   * Recommended batch size for task generation
   */
  TASK_GENERATION_BATCH: 50,
} as const;

/**
 * Data retention policies
 */
export const RETENTION_POLICIES = {
  /**
   * Keep progress records for 1 year
   */
  PROGRESS_RETENTION_DAYS: 365,

  /**
   * Keep history records indefinitely (for analytics)
   */
  HISTORY_RETENTION_DAYS: -1, // Infinite

  /**
   * Archive inactive user data after 6 months
   */
  INACTIVE_USER_THRESHOLD_DAYS: 180,
} as const;

/**
 * Export schema configuration for testing and documentation
 */
export const DAILY_TASK_SCHEMA_CONFIG = {
  collections: DAILY_TASK_COLLECTIONS,
  indexes: REQUIRED_INDEXES,
  securityRules: SUGGESTED_SECURITY_RULES,
  documentIdPatterns: DOCUMENT_ID_PATTERNS,
  estimates: COLLECTION_ESTIMATES,
  validators: TaskSchemaValidators,
  migrations: SchemaMigrations,
  queryLimits: QUERY_LIMITS,
  cacheTTL: CACHE_TTL,
  batchLimits: BATCH_LIMITS,
  retentionPolicies: RETENTION_POLICIES,
} as const;

/**
 * Type guard for DailyTask
 */
export function isDailyTask(obj: unknown): obj is DailyTask {
  const task = obj as DailyTask;
  return (
    typeof task.id === 'string' &&
    TaskSchemaValidators.isValidTaskType(task.type) &&
    TaskSchemaValidators.isValidDifficulty(task.difficulty) &&
    TaskSchemaValidators.isValidXPReward(task.xpReward) &&
    TaskSchemaValidators.isValidTimeEstimate(task.timeEstimate)
  );
}

/**
 * Type guard for DailyTaskProgress
 */
export function isDailyTaskProgress(obj: unknown): obj is DailyTaskProgress {
  const progress = obj as DailyTaskProgress;
  return (
    typeof progress.id === 'string' &&
    typeof progress.userId === 'string' &&
    TaskSchemaValidators.isValidDateFormat(progress.date) &&
    Array.isArray(progress.tasks) &&
    TaskSchemaValidators.isValidStreak(progress.streak)
  );
}

/**
 * Type guard for TaskHistoryRecord
 */
export function isTaskHistoryRecord(obj: unknown): obj is TaskHistoryRecord {
  const record = obj as TaskHistoryRecord;
  return (
    typeof record.id === 'string' &&
    typeof record.userId === 'string' &&
    typeof record.taskId === 'string' &&
    TaskSchemaValidators.isValidTaskType(record.taskType) &&
    TaskSchemaValidators.isValidScore(record.score)
  );
}
